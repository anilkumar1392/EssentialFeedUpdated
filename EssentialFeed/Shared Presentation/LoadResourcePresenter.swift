//
//  LoadResourcePresenter.swift
//  EssentialFeed
//
//  Created by 13401027 on 22/07/22.
//

import Foundation

public protocol ResourceView {
    associatedtype ResourceViewModel
    func display(viewModel: ResourceViewModel)
}

// So we can inject any view that can present Generic Resource View Model
/*
 we can compose LoadResourcePresenter with any view that can ResourceViewModel generated by the mapper.
 */
public final class LoadResourcePresenter<Resource, View: ResourceView> {
    public typealias Mapper = (Resource) -> View.ResourceViewModel
    private var resourceView: View
    private var errorView: ResourceErrorView
    private var loadingView: ResourceLoadingView
    private var mapper: Mapper

    public static var loadError: String {
        return NSLocalizedString("GENERIC_CONNECTION_ERROR",
            tableName: "Shared",
            bundle: Bundle(for: Self.self),
            comment: "Error message displayed when we can't load the resource from the server")
    }
    
    public init(resourceView: View, errorView: ResourceErrorView, loadingView: ResourceLoadingView, mapper: @escaping Mapper) {
        self.resourceView = resourceView
        self.loadingView = loadingView
        self.errorView = errorView
        self.mapper = mapper
    }

    public func didStartLoading() {
        errorView.display(viewModel: .noError)
        loadingView.display(ResourceLoadingViewModel(isLoading: true))
    }
    
    public func didFinishLoading(with resource: Resource) {
        resourceView.display(viewModel: mapper(resource))
        loadingView.display(ResourceLoadingViewModel(isLoading: false))
    }
    
    public func didFinishLoading(with error: Error) {
        errorView.display(viewModel: .error(message: Self.loadError))
        loadingView.display(ResourceLoadingViewModel(isLoading: false))
    }
}
